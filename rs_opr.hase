// Project:	Tomasulo's Algorithm
// Entity	Reservation Station Operand Register
// File		rs_opr.hase
// Date:	29 June 2001

// A separate Operand Register entity is used for each operand register in
// the Reservation Stations (in order that they can be separately
// coloured during animation).
// Each contains a register which is loaded by the Common Data Bus.

// Reservation Station registers receive direct inputs from the CDB via the
// input port and indirect inputs from the Reservation Station Unit.

// The register content is sent to the output port (connected to an Arithmetic
// Unit) on receipt of a  command from a Reservation Station

// Packets from the CDB contain an operand which is copied into the operand
// register and the entity enters the BUSY state.

// Packets from the Reservation Station just cause the operand to be sent
// to the output (and thence to an arithmetic unit) and reset the state to
// IDLE.

$class_decls

//structures and variables

  int output_snk;
  int output_src;
  int output_to_au;
  int Operand;
  int RS_no;

  void Output_to_au();  

$class_defs

  void rs_opr::Output_to_au()
{
  // Invoked by a Reservation Station

  output_to_au = 1;
}


$pre
  output_to_au = 0;
  Register = 0;
  my_state = RS_OPR;
  dump_state();

$phase0
// predicates
  sim_from_port receive(input);

	 if (output_to_au == 1)	// reset value and flags from previous cycle
	  {
	   output_to_au = 0;
	   Register = 0;
	   my_state = RS_OPR;
	   dump_state();
	  }
	sim_hold(5);	// give CDB chance to send new value in CP0
			// If there is a receive event from the CDB, 
			// copy operand data field into register data field. 
	if (sim_waiting(ev, receive) > 0)
	 {
	  SIM_CAST(int, Operand, ev);
	  Register = Operand;
	  my_state = RS_OPR_BUSY;
	  dump_state();
	 }

$phase1
	// if output_to_au is set, send content of Operand value to output
	 if (output_to_au == 1)
	  {
	   send_VALUE(output, Register);
	   }


